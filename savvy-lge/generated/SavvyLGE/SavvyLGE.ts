// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllotmentsBought extends ethereum.Event {
  get params(): AllotmentsBought__Params {
    return new AllotmentsBought__Params(this);
  }
}

export class AllotmentsBought__Params {
  _event: AllotmentsBought;

  constructor(event: AllotmentsBought) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deposited(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get allotments(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NFTCollectionInfoUpdated extends ethereum.Event {
  get params(): NFTCollectionInfoUpdated__Params {
    return new NFTCollectionInfoUpdated__Params(this);
  }
}

export class NFTCollectionInfoUpdated__Params {
  _event: NFTCollectionInfoUpdated;

  constructor(event: NFTCollectionInfoUpdated) {
    this._event = event;
  }

  get nftCollectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get limit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferStarted extends ethereum.Event {
  get params(): OwnershipTransferStarted__Params {
    return new OwnershipTransferStarted__Params(this);
  }
}

export class OwnershipTransferStarted__Params {
  _event: OwnershipTransferStarted;

  constructor(event: OwnershipTransferStarted) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProtocolTokenUpdated extends ethereum.Event {
  get params(): ProtocolTokenUpdated__Params {
    return new ProtocolTokenUpdated__Params(this);
  }
}

export class ProtocolTokenUpdated__Params {
  _event: ProtocolTokenUpdated;

  constructor(event: ProtocolTokenUpdated) {
    this._event = event;
  }

  get protocolToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalProtocolToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolTokenWithdrawn extends ethereum.Event {
  get params(): ProtocolTokenWithdrawn__Params {
    return new ProtocolTokenWithdrawn__Params(this);
  }
}

export class ProtocolTokenWithdrawn__Params {
  _event: ProtocolTokenWithdrawn;

  constructor(event: ProtocolTokenWithdrawn) {
    this._event = event;
  }

  get protocolToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalProtocolToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolTokensClaimed extends ethereum.Event {
  get params(): ProtocolTokensClaimed__Params {
    return new ProtocolTokensClaimed__Params(this);
  }
}

export class ProtocolTokensClaimed__Params {
  _event: ProtocolTokensClaimed;

  constructor(event: ProtocolTokensClaimed) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TimestampsUpdated extends ethereum.Event {
  get params(): TimestampsUpdated__Params {
    return new TimestampsUpdated__Params(this);
  }
}

export class TimestampsUpdated__Params {
  _event: TimestampsUpdated;

  constructor(event: TimestampsUpdated) {
    this._event = event;
  }

  get lgeStartTimestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lgeEndTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vestStartTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VestModesUpdated extends ethereum.Event {
  get params(): VestModesUpdated__Params {
    return new VestModesUpdated__Params(this);
  }
}

export class VestModesUpdated__Params {
  _event: VestModesUpdated;

  constructor(event: VestModesUpdated) {
    this._event = event;
  }

  get numVestModes(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class VestStartTimestampUpdated extends ethereum.Event {
  get params(): VestStartTimestampUpdated__Params {
    return new VestStartTimestampUpdated__Params(this);
  }
}

export class VestStartTimestampUpdated__Params {
  _event: VestStartTimestampUpdated;

  constructor(event: VestStartTimestampUpdated) {
    this._event = event;
  }

  get vestStartTimestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SavvyLGE__getAllotmentsPerDepositTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRemainingAmount(): BigInt {
    return this.value0;
  }

  getAllotmentsPerDepositToken(): BigInt {
    return this.value1;
  }
}

export class SavvyLGE__getNFTCollectionInfoResultValue0Struct extends ethereum.Tuple {
  get boostMultiplier(): BigInt {
    return this[0].toBigInt();
  }

  get limit(): BigInt {
    return this[1].toBigInt();
  }
}

export class SavvyLGE__getUserBuyInfoResultValue0Struct extends ethereum.Tuple {
  get deposited(): BigInt {
    return this[0].toBigInt();
  }

  get allotments(): BigInt {
    return this[1].toBigInt();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }
}

export class SavvyLGE__getVestModesResultValue0Struct extends ethereum.Tuple {
  get duration(): BigInt {
    return this[0].toBigInt();
  }

  get boostMultiplier(): BigInt {
    return this[1].toBigInt();
  }
}

export class SavvyLGE__nftAllocationInfosResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getRemaining(): BigInt {
    return this.value0;
  }

  getActivated(): boolean {
    return this.value1;
  }
}

export class SavvyLGE__nftCollectionInfosResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getBoostMultiplier(): BigInt {
    return this.value0;
  }

  getLimit(): BigInt {
    return this.value1;
  }
}

export class SavvyLGE__userBuyInfosResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDeposited(): BigInt {
    return this.value0;
  }

  getAllotments(): BigInt {
    return this.value1;
  }

  getDuration(): BigInt {
    return this.value2;
  }
}

export class SavvyLGE__vestModesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDuration(): BigInt {
    return this.value0;
  }

  getBoostMultiplier(): BigInt {
    return this.value1;
  }
}

export class SavvyLGE extends ethereum.SmartContract {
  static bind(address: Address): SavvyLGE {
    return new SavvyLGE("SavvyLGE", address);
  }

  BASIS_POINTS(): BigInt {
    let result = super.call("BASIS_POINTS", "BASIS_POINTS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASIS_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASIS_POINTS", "BASIS_POINTS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allotmentSupply(): BigInt {
    let result = super.call(
      "allotmentSupply",
      "allotmentSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allotmentSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allotmentSupply",
      "allotmentSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimed(param0: Address): BigInt {
    let result = super.call("claimed", "claimed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_claimed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimed", "claimed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositToken(): Address {
    let result = super.call("depositToken", "depositToken():(address)", []);

    return result[0].toAddress();
  }

  try_depositToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("depositToken", "depositToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositTokenWallet(): Address {
    let result = super.call(
      "depositTokenWallet",
      "depositTokenWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_depositTokenWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositTokenWallet",
      "depositTokenWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllotmentsPerDepositToken(
    nftCollectionAddress: Address,
    nftId: BigInt,
    vestModeIndex: BigInt
  ): SavvyLGE__getAllotmentsPerDepositTokenResult {
    let result = super.call(
      "getAllotmentsPerDepositToken",
      "getAllotmentsPerDepositToken(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(nftCollectionAddress),
        ethereum.Value.fromUnsignedBigInt(nftId),
        ethereum.Value.fromUnsignedBigInt(vestModeIndex)
      ]
    );

    return new SavvyLGE__getAllotmentsPerDepositTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAllotmentsPerDepositToken(
    nftCollectionAddress: Address,
    nftId: BigInt,
    vestModeIndex: BigInt
  ): ethereum.CallResult<SavvyLGE__getAllotmentsPerDepositTokenResult> {
    let result = super.tryCall(
      "getAllotmentsPerDepositToken",
      "getAllotmentsPerDepositToken(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(nftCollectionAddress),
        ethereum.Value.fromUnsignedBigInt(nftId),
        ethereum.Value.fromUnsignedBigInt(vestModeIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SavvyLGE__getAllotmentsPerDepositTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getBalanceProtocolToken(): BigInt {
    let result = super.call(
      "getBalanceProtocolToken",
      "getBalanceProtocolToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBalanceProtocolToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalanceProtocolToken",
      "getBalanceProtocolToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimable(userAddress: Address): BigInt {
    let result = super.call("getClaimable", "getClaimable(address):(uint256)", [
      ethereum.Value.fromAddress(userAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getClaimable(userAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimable",
      "getClaimable(address):(uint256)",
      [ethereum.Value.fromAddress(userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNFTBoostDecays(): Array<BigInt> {
    let result = super.call(
      "getNFTBoostDecays",
      "getNFTBoostDecays():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getNFTBoostDecays(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNFTBoostDecays",
      "getNFTBoostDecays():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getNFTCollectionInfo(
    nftCollectionAddress: Address
  ): SavvyLGE__getNFTCollectionInfoResultValue0Struct {
    let result = super.call(
      "getNFTCollectionInfo",
      "getNFTCollectionInfo(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(nftCollectionAddress)]
    );

    return changetype<SavvyLGE__getNFTCollectionInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getNFTCollectionInfo(
    nftCollectionAddress: Address
  ): ethereum.CallResult<SavvyLGE__getNFTCollectionInfoResultValue0Struct> {
    let result = super.tryCall(
      "getNFTCollectionInfo",
      "getNFTCollectionInfo(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(nftCollectionAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SavvyLGE__getNFTCollectionInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getUserBuyInfo(
    userAddress: Address
  ): SavvyLGE__getUserBuyInfoResultValue0Struct {
    let result = super.call(
      "getUserBuyInfo",
      "getUserBuyInfo(address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(userAddress)]
    );

    return changetype<SavvyLGE__getUserBuyInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUserBuyInfo(
    userAddress: Address
  ): ethereum.CallResult<SavvyLGE__getUserBuyInfoResultValue0Struct> {
    let result = super.tryCall(
      "getUserBuyInfo",
      "getUserBuyInfo(address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SavvyLGE__getUserBuyInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getVestModes(): Array<SavvyLGE__getVestModesResultValue0Struct> {
    let result = super.call(
      "getVestModes",
      "getVestModes():((uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<SavvyLGE__getVestModesResultValue0Struct>();
  }

  try_getVestModes(): ethereum.CallResult<
    Array<SavvyLGE__getVestModesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getVestModes",
      "getVestModes():((uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<SavvyLGE__getVestModesResultValue0Struct>()
    );
  }

  lgeEndTimestamp(): BigInt {
    let result = super.call(
      "lgeEndTimestamp",
      "lgeEndTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lgeEndTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lgeEndTimestamp",
      "lgeEndTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lgeStartTimestamp(): BigInt {
    let result = super.call(
      "lgeStartTimestamp",
      "lgeStartTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lgeStartTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lgeStartTimestamp",
      "lgeStartTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftAllocationInfos(
    param0: Address,
    param1: BigInt
  ): SavvyLGE__nftAllocationInfosResult {
    let result = super.call(
      "nftAllocationInfos",
      "nftAllocationInfos(address,uint256):(uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new SavvyLGE__nftAllocationInfosResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_nftAllocationInfos(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<SavvyLGE__nftAllocationInfosResult> {
    let result = super.tryCall(
      "nftAllocationInfos",
      "nftAllocationInfos(address,uint256):(uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SavvyLGE__nftAllocationInfosResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  nftBoostDecays(param0: BigInt): BigInt {
    let result = super.call(
      "nftBoostDecays",
      "nftBoostDecays(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_nftBoostDecays(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftBoostDecays",
      "nftBoostDecays(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftCollectionInfos(param0: Address): SavvyLGE__nftCollectionInfosResult {
    let result = super.call(
      "nftCollectionInfos",
      "nftCollectionInfos(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SavvyLGE__nftCollectionInfosResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_nftCollectionInfos(
    param0: Address
  ): ethereum.CallResult<SavvyLGE__nftCollectionInfosResult> {
    let result = super.tryCall(
      "nftCollectionInfos",
      "nftCollectionInfos(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SavvyLGE__nftCollectionInfosResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pricePerAllotment(): BigInt {
    let result = super.call(
      "pricePerAllotment",
      "pricePerAllotment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pricePerAllotment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerAllotment",
      "pricePerAllotment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolToken(): Address {
    let result = super.call("protocolToken", "protocolToken():(address)", []);

    return result[0].toAddress();
  }

  try_protocolToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolToken",
      "protocolToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalDeposited(): BigInt {
    let result = super.call("totalDeposited", "totalDeposited():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeposited(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeposited",
      "totalDeposited():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalProtocolToken(): BigInt {
    let result = super.call(
      "totalProtocolToken",
      "totalProtocolToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalProtocolToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalProtocolToken",
      "totalProtocolToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userBuyInfos(param0: Address): SavvyLGE__userBuyInfosResult {
    let result = super.call(
      "userBuyInfos",
      "userBuyInfos(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SavvyLGE__userBuyInfosResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userBuyInfos(
    param0: Address
  ): ethereum.CallResult<SavvyLGE__userBuyInfosResult> {
    let result = super.tryCall(
      "userBuyInfos",
      "userBuyInfos(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SavvyLGE__userBuyInfosResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  vestModes(param0: BigInt): SavvyLGE__vestModesResult {
    let result = super.call(
      "vestModes",
      "vestModes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SavvyLGE__vestModesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_vestModes(
    param0: BigInt
  ): ethereum.CallResult<SavvyLGE__vestModesResult> {
    let result = super.tryCall(
      "vestModes",
      "vestModes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SavvyLGE__vestModesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  vestStartTimestamp(): BigInt {
    let result = super.call(
      "vestStartTimestamp",
      "vestStartTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_vestStartTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestStartTimestamp",
      "vestStartTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nftCollectionAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nftId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get vestModeIndex(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _protocolToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _depositToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _depositTokenWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lgeStartTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _lgeDurationDays(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _vestStartOffset(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _nftBoostDecays(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get _vestModes(): Array<InitializeCall_vestModesStruct> {
    return this._call.inputValues[7].value.toTupleArray<
      InitializeCall_vestModesStruct
    >();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_vestModesStruct extends ethereum.Tuple {
  get duration(): BigInt {
    return this[0].toBigInt();
  }

  get boostMultiplier(): BigInt {
    return this[1].toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetNFTCollectionInfoCall extends ethereum.Call {
  get inputs(): SetNFTCollectionInfoCall__Inputs {
    return new SetNFTCollectionInfoCall__Inputs(this);
  }

  get outputs(): SetNFTCollectionInfoCall__Outputs {
    return new SetNFTCollectionInfoCall__Outputs(this);
  }
}

export class SetNFTCollectionInfoCall__Inputs {
  _call: SetNFTCollectionInfoCall;

  constructor(call: SetNFTCollectionInfoCall) {
    this._call = call;
  }

  get nftCollectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get boostMultiplier(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get limit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetNFTCollectionInfoCall__Outputs {
  _call: SetNFTCollectionInfoCall;

  constructor(call: SetNFTCollectionInfoCall) {
    this._call = call;
  }
}

export class SetProtocolTokenCall extends ethereum.Call {
  get inputs(): SetProtocolTokenCall__Inputs {
    return new SetProtocolTokenCall__Inputs(this);
  }

  get outputs(): SetProtocolTokenCall__Outputs {
    return new SetProtocolTokenCall__Outputs(this);
  }
}

export class SetProtocolTokenCall__Inputs {
  _call: SetProtocolTokenCall;

  constructor(call: SetProtocolTokenCall) {
    this._call = call;
  }

  get _protocolToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProtocolTokenCall__Outputs {
  _call: SetProtocolTokenCall;

  constructor(call: SetProtocolTokenCall) {
    this._call = call;
  }
}

export class SetTimestampsCall extends ethereum.Call {
  get inputs(): SetTimestampsCall__Inputs {
    return new SetTimestampsCall__Inputs(this);
  }

  get outputs(): SetTimestampsCall__Outputs {
    return new SetTimestampsCall__Outputs(this);
  }
}

export class SetTimestampsCall__Inputs {
  _call: SetTimestampsCall;

  constructor(call: SetTimestampsCall) {
    this._call = call;
  }

  get _lgeStartTimestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lgeDurationDays(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _vestStartOffset(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _nftBoostDecays(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class SetTimestampsCall__Outputs {
  _call: SetTimestampsCall;

  constructor(call: SetTimestampsCall) {
    this._call = call;
  }
}

export class SetVestModesCall extends ethereum.Call {
  get inputs(): SetVestModesCall__Inputs {
    return new SetVestModesCall__Inputs(this);
  }

  get outputs(): SetVestModesCall__Outputs {
    return new SetVestModesCall__Outputs(this);
  }
}

export class SetVestModesCall__Inputs {
  _call: SetVestModesCall;

  constructor(call: SetVestModesCall) {
    this._call = call;
  }

  get _vestModes(): Array<SetVestModesCall_vestModesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetVestModesCall_vestModesStruct
    >();
  }
}

export class SetVestModesCall__Outputs {
  _call: SetVestModesCall;

  constructor(call: SetVestModesCall) {
    this._call = call;
  }
}

export class SetVestModesCall_vestModesStruct extends ethereum.Tuple {
  get duration(): BigInt {
    return this[0].toBigInt();
  }

  get boostMultiplier(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetVestStartOffsetCall extends ethereum.Call {
  get inputs(): SetVestStartOffsetCall__Inputs {
    return new SetVestStartOffsetCall__Inputs(this);
  }

  get outputs(): SetVestStartOffsetCall__Outputs {
    return new SetVestStartOffsetCall__Outputs(this);
  }
}

export class SetVestStartOffsetCall__Inputs {
  _call: SetVestStartOffsetCall;

  constructor(call: SetVestStartOffsetCall) {
    this._call = call;
  }

  get _vestStartOffset(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVestStartOffsetCall__Outputs {
  _call: SetVestStartOffsetCall;

  constructor(call: SetVestStartOffsetCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawProtocolTokenCall extends ethereum.Call {
  get inputs(): WithdrawProtocolTokenCall__Inputs {
    return new WithdrawProtocolTokenCall__Inputs(this);
  }

  get outputs(): WithdrawProtocolTokenCall__Outputs {
    return new WithdrawProtocolTokenCall__Outputs(this);
  }
}

export class WithdrawProtocolTokenCall__Inputs {
  _call: WithdrawProtocolTokenCall;

  constructor(call: WithdrawProtocolTokenCall) {
    this._call = call;
  }
}

export class WithdrawProtocolTokenCall__Outputs {
  _call: WithdrawProtocolTokenCall;

  constructor(call: WithdrawProtocolTokenCall) {
    this._call = call;
  }
}
