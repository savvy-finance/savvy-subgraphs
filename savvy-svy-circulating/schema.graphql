##########################################################
##                                                      ##
## THIS FILE IS AUTOGENERATED BY ./setup/buildSchema.ts ##
##                DO NOT EDIT DIRECTLY                  ##
##                                                      ##
##########################################################

enum Network {
  ARBITRUM_ONE
  ARBITRUM_GOERLI
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

###########################
## Blockchain Primitives ##
###########################

type Block @entity {
  " Block number "
  id: ID!

  " Block number "
  number: BigInt!

  " Block hash "
  hash: Bytes!

  " Timestamp of this block "
  timestamp: BigInt!

  " List of events related to this block "
  events: [Event!]! @derivedFrom(field: "block")

  " List of transactions in this block "
  transactions: [Transaction!]! @derivedFrom(field: "block")
}

type Transaction @entity {
  " Transaction hash "
  id: ID!

  " Transaction hash "
  hash: Bytes!

  " Transaction input data "
  input: Bytes!

  " Transaction from "
  from: Bytes

  " Transaction to "
  to: Bytes

  " Block this transaction commited on "
  block: Block!

  " Timestamp of this transaction "
  timestamp: BigInt!

  " List of events emitted by this transaction "
  events: [Event!]! @derivedFrom(field: "transaction")
}

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
interface Event {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  transaction: Transaction!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  # " The protocol this transaction belongs to "
  # protocol: Protocol!

  " Block number of this event "
  block: Block!

  " Timestamp of this event "
  timestamp: BigInt!
}

type Token @entity @regularPolling {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

interface Contract {
  " Contract address "
  id: ID!
}

#########################
##### Savvy Account #####
#########################

type Account @entity @regularPolling {
  " The address of the account "
  id: ID!

  " user owned SVY amount "
  svyAmount: BigInt!

  " staked SVY amount "
  stakedSVY: BigInt!

  "The timestamp of the last update"
  lastUpdatedTimestamp: BigInt!
}

type AccountSnapshot @entity {
  " { The address of the account }-{ snapshot timestamp }"
  id: ID!

  "The time between snapshots in seconds"
  period: BigInt!

  " The timestamp of the snapshot "
  timestamp: BigInt!

  " user owned SVY amount "
  svyAmount: BigInt!

  " staked SVY amount "
  stakedSVY: BigInt!
}

################
## Savvy VeSVY ##
################

type SvyTransferred implements Event @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  transaction: Transaction!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  block: Block!

  " Timestamp of this event "
  timestamp: BigInt!

  from: Bytes! # address
  to: Bytes! # address
  amount: BigInt!
}

################
## Savvy VeSVY ##
################

type VeSStaked implements Event @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  transaction: Transaction!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  block: Block!

  " Timestamp of this event "
  timestamp: BigInt!

  sender: Bytes! # address
  user: Bytes! # address
  amount: BigInt!
}

type VeSUnstaked implements Event @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  transaction: Transaction!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  block: Block!

  " Timestamp of this event "
  timestamp: BigInt!

  user: Bytes! # address
  amount: BigInt!
}

type VeSClaimed implements Event @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  transaction: Transaction!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  block: Block!

  " Timestamp of this event "
  timestamp: BigInt!

  user: Bytes! # address
  amount: BigInt!
}

################
## Savvy Booster ##
################

type SBDeposit implements Event @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  transaction: Transaction!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  block: Block!

  " Timestamp of this event "
  timestamp: BigInt!

  amount: BigInt!
  poolId: BigInt! # address
}

type SBWithdraw implements Event @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  transaction: Transaction!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  block: Block!

  " Timestamp of this event "
  timestamp: BigInt!

  amount: BigInt!
}

type SBClaim implements Event @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  transaction: Transaction!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  block: Block!

  " Timestamp of this event "
  timestamp: BigInt!

  user: Bytes! # address
  rewardAmount: BigInt!
  pendingAmount: BigInt!
}
